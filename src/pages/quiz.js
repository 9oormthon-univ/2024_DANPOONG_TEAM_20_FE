import React, {useState, useEffect} from 'react';
import { View, Text, StyleSheet, Pressable, ScrollView, Dimensions, Modal} from 'react-native';

import BackIcon from '../images/back.svg';
import QuizDateIcon from '../images/quiz_date.svg';
import CorrectModal from '../components/CorrectModal';
import IncorrectModal from '../components/IncorrectModal';
import AsyncStorage from '@react-native-async-storage/async-storage';

const {width} = Dimensions.get('window');

const Quiz = ({navigation}) => {
  const [selectedOption, setSelectedOption] = useState(null); // ÏÑ†ÌÉùÎêú ÎãµÎ≥Ä ÏÉÅÌÉú
  const [isCorrect, setIsCorrect] = useState(null); // Ï†ïÎãµ Ïó¨Î∂Ä
  const [showModal, setShowModal] = useState(false); // Î™®Îã¨ ÌëúÏãú ÏÉÅÌÉú
  const [quiz, setQuiz] = useState(null);

  // ÌÄ¥Ï¶à Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏöîÏ≤≠ Ìï®Ïàò (POST)
  const fetchQuiz = async () => {
    try {
      const accessToken = await AsyncStorage.getItem('accessToken');
      const response = await fetch('https://mixmix2.store/api/quiz', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json', 
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify({}), 
      });

      if (!response.ok) {
        throw new Error('ÌÄ¥Ï¶àÎ•º Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      const data = await response.json(); 
      setQuiz(data); // ÌÄ¥Ï¶à Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉúÏóê Ï†ÄÏû•
      console.log(quiz);
    } catch (error) {
      console.error('ÌÄ¥Ï¶àÎ•º Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:', error);
    }
  };
  useEffect(() => {
    fetchQuiz();
  }, []);

  // ÎçîÎØ∏ ÌÄ¥Ï¶à Îç∞Ïù¥ÌÑ∞
  const currentQuiz = {
    date: '24.11.23',
    question:
      'Ïù¥Ïä¨Îûå Íµ≠Í∞ÄÎ°ú ÎèºÏßÄÍ≥†Í∏∞ ÏÑ≠Ï∑®Í∞Ä Î∂àÍ∞ÄÎä•ÌïòÍ≥† ÏàòÎèÑÍ∞Ä ‚ÄòÏïôÏπ¥Îùº‚ÄôÏù∏ ‚ÄòÏù¥ ÎÇòÎùº‚ÄôÎäî Ïñ¥ÎîîÏùºÍπåÏöî?',
    options: [
      {id: 1, text: 'ÎèÖÏùº', flag: 'üá©üá™'},
      {id: 2, text: 'Ïù¥ÌÉàÎ¶¨ÏïÑ', flag: 'üáÆüáπ'},
      {id: 3, text: 'ÌÑ∞ÌÇ§', flag: 'üáπüá∑'}, // Ï†ïÎãµ
      {id: 4, text: 'Î∏åÎùºÏßà', flag: 'üáßüá∑'},
    ],
    answer: 'ÌÑ∞ÌÇ§',
  };

  // Ï†ïÎãµ Ï†úÏ∂ú Ï≤òÎ¶¨
  const handleSubmit = () => {
    if (selectedOption) {
      const isCorrectAnswer = selectedOption.id === quiz.answer;
      setIsCorrect(isCorrectAnswer);
      setShowModal(true); // Î™®Îã¨ ÌëúÏãú
    } else {
      alert('ÎãµÎ≥ÄÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
    }
  };

  return (
    <View style={styles.container}>
      {/* Ìó§Îçî */}
      <View style={styles.header}>
        <Pressable
          onPress={() => navigation.navigate('MyProfile')}
          style={styles.backButton}>
          <BackIcon width={24} height={24} />
        </Pressable>
        <Text style={styles.headerTitle}>Ïò§ÎäòÏùò ÌÄ¥Ï¶à</Text>
      </View>

      {/* ÎÇ†Ïßú Î∞è ÏïÑÏù¥ÏΩò */}
      <View style={styles.dateContainer}>
        <Text style={styles.dateText}>{currentQuiz.date}</Text>
        <QuizDateIcon style={styles.quizDateIcon} width={20} height={20} />
      </View>

      {/* Î¨∏Ï†ú ÌÖçÏä§Ìä∏ */}
      <ScrollView contentContainerStyle={styles.questionContainer}>
        <Text style={styles.questionText}>{currentQuiz.question}</Text>

        {/* ÎãµÎ≥Ä ÏòµÏÖò */}
        {currentQuiz.options.map(option => (
          <Pressable
            key={option.id}
            style={[
              styles.optionButton,
              selectedOption?.id === option.id && styles.selectedOption,
            ]}
            onPress={() => setSelectedOption(option)}>
            <Text style={styles.optionFlag}>{option.flag}</Text>
            <Text style={styles.optionText}>{option.text}</Text>
          </Pressable>
        ))}
      </ScrollView>

      {/* Ï†úÏ∂ú Î≤ÑÌäº */}
      <Pressable style={styles.submitButton} onPress={handleSubmit}>
        <Text style={styles.submitButtonText}>Ï†úÏ∂úÌïòÍ∏∞</Text>
      </Pressable>

      {/* Ï†ïÎãµ/Ïò§Îãµ Î™®Îã¨ */}
      {isCorrect !== null && (
        <Modal
          transparent
          visible={showModal}
          animationType="slide"
          onRequestClose={() => setShowModal(false)}>
          {isCorrect ? (
            <CorrectModal
              onClose={() => setShowModal(false)}
              navigation={navigation}
            />
          ) : (
            <IncorrectModal onClose={() => setShowModal(false)} />
          )}
        </Modal>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 24,
    backgroundColor: '#F6F6F6',
    position: 'relative',
  },
  backButton: {
    position: 'absolute',
    left: 16,
    zIndex: 10,
    padding: 10,
  },

  headerTitle: {
    fontSize: width * 0.04,
    fontWeight: 'bold',
    position: 'absolute',
    left: 0,
    right: 0,
    textAlign: 'center',
    color: '#000',
  },
  dateContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 16,
    paddingHorizontal: 20,
    position: 'relative',
  },
  dateText: {
    fontSize: width * 0.04,
    fontWeight: 'bold',
    color: '#000',
    textAlign: 'center',
    flex: 1,
  },
  quizDateIcon: {
    position: 'absolute',
    right: 20,
  },
  questionContainer: {
    paddingHorizontal: 20,
    paddingVertical: 40,
    alignItems: 'center',
  },
  questionText: {
    fontSize: width * 0.048,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 30,
    lineHeight: 30,
    color: '#000',
    paddingHorizontal: 28,
  },
  optionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    marginBottom: 12,
    backgroundColor: '#F6F6F6',
    borderRadius: 25,
    width: '85%',
  },
  selectedOption: {
    backgroundColor: 'rgba(255, 97, 82, 0.7)',
  },
  optionFlag: {
    fontSize: width * 0.05,
    marginRight: 8,
    color: '#000',
  },
  optionText: {
    fontSize: width * 0.04,
    color: '#000',
  },
  submitButton: {
    backgroundColor: '#FF6152',
    paddingVertical: 12,
    marginHorizontal: 20,
    borderRadius: 8,
    marginBottom: 24,
    alignItems: 'center',
    width: '85%',
    alignSelf: 'center',
  },
  submitButtonText: {
    fontSize: width * 0.04,
    color: '#fff',
    fontWeight: 'bold',
  },
});

export default Quiz;
